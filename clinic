// Messages class
class Messages {
    static welcomeText() {
        console.log("Welcome to Local Clinic (Carlangas)!\n" + "\n" +
            "Your satisfaction is our top priority. We're here to serve you and exceed your expectations.");
    }

    static goodbyeText() {
        console.log("Goodbye and take care!" + "\n" + "Wishing you all the best.");
    }
}

// Person class
class Person {
    static getPersonalInformation() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        rl.question("Please Input your first name: ", (firstName) => {
            rl.question("Please Input your last name: ", (lastName) => {
                rl.close();
                console.log("First Name: " + firstName + ", Last Name: " + lastName);
            });
        });
    }
}

// BloodTypes class
class BloodTypes {
    static bloodTypeMap = [
        [
            ["A+", "O+", "B+", "AB+", "A-", "O-", "B-", "AB-"]
        ],
        [
            ["A+, AB+"], ["O+, A+, B+, AB+"], ["B+, AB+"], ["AB+"],
            ["A+, A-, AB+, AB-"], ["Everyone"], ["B+, B-, AB+, AB-"], ["AB+, AB-"]
        ],
        [
            ["A+, A-, O+, O-"], ["O+, O-"], ["B+, B-, O+, O-"], ["Everyone"],
            ["A-, O-"], ["O-"], ["B-, O-"], ["AB-, A-, B-, O-"]
        ]
    ];

    static getBloodType(position) {
        return BloodTypes.bloodTypeMap[0][0][position];
    }
}

// BloodTypeCompatibility class
class BloodTypeCompatibility {
    static main() {
        Messages.welcomeText();
        Person.getPersonalInformation();
        this.getChoice();
        this.getBloodType();
        this.setValues();
        Messages.goodbyeText();
    }

    static getChoice() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        rl.question("Are you a donor or receiver (1 for Donor, 2 for Receiver): ", (choice) => {
            if (choice == 1 || choice == 2) {
                rl.close();
            } else {
                console.log("Choice doesn't exist, please try again!");
                this.getChoice();
            }
        });
    }

    static getBloodType() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        rl.question("Please provide your blood type (A+, O+, B+, AB+, A-, O-, B-, AB-): ", (bloodType) => {
            if (this.validBloodType(bloodType)) {
                rl.close();
            } else {
                console.log("Invalid blood type, please try again!");
                this.getBloodType();
            }
        });
    }

    static validBloodType(bloodType) {
        for (let i = 0; i < BloodTypes.bloodTypeMap[0][0].length; i++) {
            if (BloodTypes.getBloodType(i).toUpperCase() === bloodType.toUpperCase()) {
                return true;
            }
        }
        return false;
    }

    static getBloodTypesReceivedByReceiver() {
        let bloodTypeResult = "";
        for (let i = 0; i < BloodTypes.bloodTypeMap[this.choice][this.position].length; i++) {
            bloodTypeResult = BloodTypes.bloodTypeMap[this.choice][this.position][i];
        }
        return bloodTypeResult;
    }

    static setValues() {
        if (this.choice == 1) {
            const donorBloodTypes = this.getBloodTypesReceivedByReceiver();
            console.log("As a donor, you can give blood to: " + donorBloodTypes + "\n");
        } else {
            const receiverBloodTypes = this.getBloodTypesReceivedByReceiver();
            console.log("As a receiver, you can receive blood from: " + receiverBloodTypes + "\n");
        }
    }
}

// Main program
BloodTypeCompatibility.main();
